package main

/*
Este √© o arquivo principal (main.go) da nossa API de Fitness.
Em Go, o arquivo main.go √© o ponto de entrada da aplica√ß√£o - √© onde tudo come√ßa!

O que este arquivo faz:
1. Configura o servidor web usando o framework Echo
2. Estabelece conex√£o com o banco de dados
3. Configura middlewares (filtros que processam requisi√ß√µes)
4. Define todas as rotas da API
5. Inicia o servidor na porta 8080
*/

import (
	"fitness-api/internal/handlers" // Pacote que cont√©m todas as fun√ß√µes que respondem √†s requisi√ß√µes HTTP
	"fitness-api/db"  // Pacote que gerencia a conex√£o com o banco de dados

	"github.com/labstack/echo/v4"            // Framework web Echo - facilita a cria√ß√£o de APIs REST
	"github.com/labstack/echo/v4/middleware" // Middlewares do Echo - funcionalidades extras para o servidor
	"fmt"
)

// Fun√ß√£o main() √© obrigat√≥ria em Go - √© onde a execu√ß√£o do programa come√ßa
func main() {
	// Estabelece conex√£o com o banco de dados PostgreSQL
	// Esta fun√ß√£o est√° definida no arquivo database.go
	storage.ConnectDB()

	// Cria uma nova inst√¢ncia do servidor Echo
	// Echo √© um framework web que facilita a cria√ß√£o de APIs REST
	e := echo.New()

	// ===== CONFIGURA√á√ÉO DE MIDDLEWARES =====
	// Middlewares s√£o fun√ß√µes que executam antes ou depois das requisi√ß√µes
	// Eles podem modificar requisi√ß√µes, adicionar logs, verificar autentica√ß√£o, etc.

	// Middleware de Logger - registra todas as requisi√ß√µes e respostas no console
	// √ötil para debug e monitoramento da API
	e.Use(middleware.Logger())

	// Middleware CORS - permite que aplica√ß√µes web de outros dom√≠nios acessem nossa API
	// CORS = Cross-Origin Resource Sharing
	// AllowOrigins: []string{"*"} = permite acesso de qualquer origem (n√£o recomendado para produ√ß√£o)
	// AllowHeaders = define quais cabe√ßalhos HTTP s√£o permitidos
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"}, // ‚ö†Ô∏è Em produ√ß√£o, especifique dom√≠nios espec√≠ficos
		AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
	}))

	// ===== DEFINI√á√ÉO DAS ROTAS =====
	// Cada rota mapeia um caminho URL para uma fun√ß√£o handler
	// GET = buscar dados, POST = criar, PUT = atualizar, DELETE = remover

	// Rota raiz - p√°gina inicial da API
	e.GET("/", handlers.Home)

	// ===== ROTAS DE USU√ÅRIOS =====
	// CRUD completo para usu√°rios (Create, Read, Update, Delete)
	
	// GET /users - Lista todos os usu√°rios
	e.GET("/users", handlers.HandleGetUsers)
	
	// GET /users/:id - Busca um usu√°rio espec√≠fico pelo ID
	// :id √© um par√¢metro din√¢mico que ser√° substitu√≠do pelo ID real
	e.GET("/users/:id", handlers.HandleGetUser)
	
	// POST /users - Cria um novo usu√°rio
	e.POST("/users", handlers.HandleCreateUser)
	
	// PUT /users/:id - Atualiza um usu√°rio existente
	e.PUT("/users/:id", handlers.HandleUpdateUser)
	
	// DELETE /users/:id - Remove um usu√°rio
	e.DELETE("/users/:id", handlers.HandleDeleteUser)

	// ===== ROTAS DE MEDI√á√ïES =====
	// CRUD completo para medi√ß√µes de fitness (peso, altura, gordura corporal)
	
	// GET /measurements - Lista todas as medi√ß√µes
	e.GET("/measurements", handlers.HandleGetMeasurements)
	
	// GET /measurements/:id - Busca uma medi√ß√£o espec√≠fica pelo ID
	e.GET("/measurements/:id", handlers.HandleGetMeasurement)
	
	// POST /measurements - Cria uma nova medi√ß√£o
	e.POST("/measurements", handlers.HandleCreateMeasurement)
	
	// PUT /measurements/:id - Atualiza uma medi√ß√£o existente
	e.PUT("/measurements/:id", handlers.HandleUpdateMeasurement)
	
	// DELETE /measurements/:id - Remove uma medi√ß√£o
	e.DELETE("/measurements/:id", handlers.HandleDeleteMeasurement)

	// ===== INICIALIZA√á√ÉO DO SERVIDOR =====
	// Inicia o servidor na porta 8080
	// e.Start() inicia o servidor HTTP
	// e.Logger.Fatal() para a aplica√ß√£o se houver erro na inicializa√ß√£o
	fmt.Println("üöÄ Servidor iniciado em http://localhost:8080")
	e.Logger.Fatal(e.Start(":8080"))
}