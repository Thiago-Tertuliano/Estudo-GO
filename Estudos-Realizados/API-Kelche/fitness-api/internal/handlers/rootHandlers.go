package handlers // Pacote handlers cont√©m as fun√ß√µes que respondem √†s requisi√ß√µes HTTP

/*
Este arquivo (rootHandlers.go) cont√©m o handler para a rota raiz da API.
A rota raiz (/) √© a primeira p√°gina que os usu√°rios veem quando acessam a API.

Conceitos importantes:
- Rota raiz: endpoint principal da API (ex: http://localhost:8080/)
- Handler simples: fun√ß√£o que retorna uma resposta b√°sica
- Status codes: c√≥digos HTTP que indicam o resultado da opera√ß√£o
- String response: resposta em formato texto simples
*/

import (
	"net/http" // Constantes HTTP (StatusOK, etc.)
	"github.com/labstack/echo/v4" // Framework web Echo
)

// Home √© o handler para a rota raiz da API
// Esta fun√ß√£o √© chamada quando algu√©m acessa http://localhost:8080/
func Home(c echo.Context) error {
	// c.String() retorna uma resposta em formato texto
	// http.StatusOK = c√≥digo 200 (sucesso)
	// A mensagem √© exibida no navegador ou cliente HTTP
	return c.String(http.StatusOK, "API de Fitness - GO + Echo + PostgreSQL")
}

/*
EXEMPLOS DE RESPOSTAS:

1. Resposta atual:
   "API de Fitness - GO + Echo + PostgreSQL"

2. Resposta mais elaborada (sugest√£o):
   "üöÄ API de Fitness v1.0
    Tecnologias: Go + Echo + PostgreSQL
    Status: Online
    Endpoints dispon√≠veis:
    - GET /users - Listar usu√°rios
    - POST /users - Criar usu√°rio
    - GET /measurements - Listar medi√ß√µes
    - POST /measurements - Criar medi√ß√£o"

3. Resposta em JSON (sugest√£o):
   {
     "name": "API de Fitness",
     "version": "1.0.0",
     "status": "online",
     "technologies": ["Go", "Echo", "PostgreSQL"],
     "endpoints": {
       "users": "/users",
       "measurements": "/measurements"
     }
   }

C√ìDIGOS DE STATUS HTTP:

- 200 (OK): Requisi√ß√£o bem-sucedida
- 404 (Not Found): P√°gina n√£o encontrada
- 500 (Internal Server Error): Erro interno do servidor

TESTANDO A ROTA:

1. Via navegador:
   Acesse: http://localhost:8080/

2. Via curl:
   curl http://localhost:8080/

3. Via Postman:
   GET http://localhost:8080/

MELHORIAS SUGERIDAS:

1. Adicionar informa√ß√µes da vers√£o da API
2. Incluir links para documenta√ß√£o
3. Mostrar status do banco de dados
4. Adicionar timestamp da resposta
5. Implementar health check
6. Criar p√°gina de documenta√ß√£o interativa (Swagger)
*/
